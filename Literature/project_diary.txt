OCTOBER 2021
--------------
10-19-2021
Resuming project after med school app hiatus. Met with Alexis to touchbase on project status & next steps. Discussed first optimizing a single parameter value (promoter A strength) instead of all promoters. Created python script 'mini_optimization_pA'. 

10-20-2021
@check terminator locations

10-26-2021
Continuing work on mini_optimization_pA. Finished get_error() function to calculate RMSE. Started work on wrapper() which will implement hill climbing algorithm to optimize pA. 
@check terminator locations

10-29-2021
Received feedback from Alexis on 'mini_optimization_pA': 
1) Add doc strings for each function
2) Add comments for values hardcoded/source
3) gnu parallel = command line utility, use this to run stuff on pod; Turn this into a python script that takes a command=line variable & use gnu parallel to run it on the pod; Create a text file with param values --> bash script. 

Discussed whether to 1) treat pA,pB,pD as distinct, independent parameters OR 2) whether to assume the relative fold change experimentally recorded across all promoters will inform their relative binding strengths. Will proceed with Option 2. 

@Alexis will send an example script of how to use gnu parallel

NOVEMBER 2021
--------------
11-2-2021
Tried to scale promoter strengths using fold-change relationship. Dead end, resulted in wildly wrong distribution...will try to rerun with different starting points. Created 'weird_pt_errors.py" to find issues with pinetree. Also finally fixed terminator positions. 

11-3-2021
@Clean up scripts & files, change names 
    *on run_pt() function, add an argument that allows user to create a folder to store that specific set of runs. Will help keep different trials more organized.
@Try running mini_optimization_pA.py with scaled promoter values & find different stepping points. 


11-17-2021
Spent some time reconsolidating my work to assess where I am in this project. 
*completed, ~in progress, ^future

    AIM 1: Recapitulate Gene Expression patterns in wildtype PhiX-174
        a) *Created script to parse genebank file, extract genomic coordinates, and linearize circular genome (parsing_genebank)
        
        b) *Created script to run pinetree using linearized genomic coordinates; manually toggled parameter values (phiX174_optimization) 
        
        c) *Implement Hill Climbing algorithm to optimize 1 parameter (mini_optimization)
        
        d) ~repeat Hill Climbing to optimize each paramter individually 
        
        e) ~optimize multiple parameters w/ step idea
        
        
    AIM 2: Capture change in viral fitness after genomic modularization 
        a) ~write script that calculates fitness from transcript levels using stoichiometric relationships (Leuven 2020)
        
        b) ^linearize genome & remove overlapping features (Wright 2020) and find change in fitness. 
        
        
    AIM 3: Capture change in viral fitness after whole codon deoptimization
        a) ^Extract amino acid sequences for each gene from genebank file 
        b) Play with transcription rates/weights applied to the genes to mimic deoptimized codon usage

Met with Claus and Alexis to review project aims; removing Aim 3 because of challenges modeling tRNA behavior. Focus on Aims 1 & 2. Discussed new optimization strategy using normal distributions for each parameter. See written research notes for details. 

11-25-2021
Thought through new optimization technique discussed with Claus. Started writing pseudocode in phix174_optmization.py code. Action Items that are next:

    @TODO Write run_pt() function which accept arguments for pA/B/D and oA/B/D
    @TODO Write calc_error() function
    @TODO Figure out how to define & Sample from normal distribution
    @TODO Write error comparison code 
    @TODO ^Write first for only pA and see if it works
    @TODO Write function that will plot transcript abundances to match Logel 2020 plot

11-26-2021
Wrote run_pt() function which accept arguments for pA/B/D and oA/B/D. Wrote calc_error() function. Also figured out how to define & Sample from normal distribution defined (arbitrarily?) for each promoter value. Tested this code on 1 promoter value (pA). 
  
11-29-2021
Expanded phix_opt code for three promoter values. Realized that some promoter values will result in an overlap error in the pinetree simulation -- using try/except to catch these values and isolate promoter values that do work. Remain unconvinced by the normal distributions I have specified for each promoter & the step size. Meeting with Alexis tomorrow to touchbase. 

11-30-2021
Met with Alexis to touchbase on optimization algorithm: Feedback includes -
    1) Concerns about 'arbitrary' distribution for promoter strengths --> solution is to have runs with different assumed distributions. @TODO Need to think more about how I will generate these 
    2) Concerns with pinetree errors --> solution is to try reinstalling pinetree directly from the git repository since Alexis likely has solved this overlap error already. 
    
Also discussed next steps, after finishing optimization code: 
    1) Move code onto the Wilke Pod. See Alexis's 'gnu parallel' repository to see:
        a) how to write main script to read arguments in a file
        b) write text file with parameters & run info
        c) write bash file to read text file & run main script
    2) On Pod:
      DONE  a) set up file in the scratch environment for the project & figure out how to push to github
      DONE  b) create project specific conda environment & install relevant packages


DECEMBER 2021
--------------
12-1-2021

Successfully ran Alexis' gnu-parallel-example on the Wilke POD & set up github connection. Goals for today: 
    DONE @TODO Finish writing optimization code (add try-except clauses)
        *Not necessary b/c Alexis found issue of overlapping ribosome and gene sequences. 
    @TODO Create 1) jobs.txt 2) bash script 3) python script 
    @TODO Create scenarios with 
        1) different promoter distributions 
        2) have 10 runs for each promoter distribution





DIRECTORY
----------------------
mini_optmization_pA.py : script optimizing 1 promoter (pA)
weird_pt_errors.py : find error codes with pt

